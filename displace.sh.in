# displace.sh.in: diversion helpers for maintainer scripts
#
# displace_link <prefix> <suffix>
#
#   Ensures that the file <prefix><suffix> is properly diverted to
#   <prefix>.divert-orig<suffix> by this package, and becomes a
#   symbolic link to either <prefix>.divert<suffix> (default) or
#   <prefix>.divert-orig<suffix>.
#
# undisplace_unlink <prefix> <suffix>
#
#   Undoes the action of displace_link <prefix> <suffix> specified
#   above.
#
# Version: 5.2
#
# Copyright © 2008–2012 Tim Abbott <tabbott@mit.edu> and Anders
# Kaseorg <andersk@mit.edu>
# Copyright © 2014 Massachusetts Institute of Technology
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the “Software”), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

package=#PACKAGE#

ours=#DEB_DISPLACE_EXTENSION#
theirs=#DEB_DISPLACE_EXTENSION#-orig

cachedir="/var/cache/config-package-dev"

cpd_debug()
{
    if [ -e "/var/lib/config-package-dev/.debug" ]; then
        echo "D: $@" >&2
    fi
}

displace_link_divert()
{
    file=$1
    ourfile=$2
    theirfile=$3
    if ! LC_ALL=C dpkg-divert --list "$package" | \
	grep -xFq "diversion of $file to $theirfile by $package"; then
	dpkg-divert --divert "$theirfile" --rename --package "$package" --add "$file"
    fi
}

displace_link_symlink()
{
    file=$1
    ourfile=$2
    theirfile=$3
    if [ ! -L "$file" ] && [ ! -e "$file" ]; then
	ln -s "$(basename "$ourfile")" "$file"
    elif [ ! -L "$file" ] || \
	[ "$(readlink "$file")" != "$(basename "$ourfile")" -a \
	  "$(readlink "$file")" != "$(basename "$theirfile")" ]; then
	echo "*** OMINOUS WARNING ***: $file is not linked to either $(basename "$ourfile") or $(basename "$theirfile")" >&2
    fi
}

displace_link()
{
    prefix=$1
    suffix=$2

    file=$prefix$suffix
    ourfile=$prefix$ours$suffix
    theirfile=$prefix$theirs$suffix
    displace_link_divert "$file" "$ourfile" "$theirfile"
    displace_link_symlink "$file" "$ourfile" "$theirfile"
}

displace_hide()
{
    file=$1
    ourfile=""
    theirfile=$2
    displace_link_divert "$file" "$ourfile" "$theirfile"
}

undisplace_unlink_symlink()
{
    file="$1"
    ourfile="$2"
    theirfile="$3"
    if [ ! -L "$file" ] || \
	[ "$(readlink "$file")" != "$(basename "$ourfile")" -a \
	  "$(readlink "$file")" != "$(basename "$theirfile")" ]; then
	echo "*** OMINOUS WARNING ***: $file is not linked to either $(basename "$ourfile") or $(basename "$theirfile")" >&2
    else
	rm -f "$file"
    fi
}

undisplace_unlink_undivert()
{
    file="$1"
    if [ ! -L "$file" ] && [ ! -e "$file" ]; then
	dpkg-divert --remove --rename --package "$package" "$file"
    else
	echo "Not removing diversion of $file by $package" >&2
    fi
}

undisplace_unlink()
{
    prefix=$1
    suffix=$2

    file=$prefix$suffix
    ourfile=$prefix$ours$suffix
    theirfile=$prefix$theirs$suffix

    undisplace_unlink_symlink "$file" "$ourfile" "$theirfile"
    undisplace_unlink_undivert "$file"
}

undisplace_unhide()
{
    file=$1
    undisplace_unlink_undivert "$file"
}

check_undisplace_unlink()
{
    prefix=$1
    suffix=$2

    file=$prefix$suffix
    ourfile=$prefix$ours$suffix
    theirfile=$prefix$theirs$suffix

    if LC_ALL=C dpkg-divert --list "$package" | \
	grep -xFq "diversion of $file to $theirfile by $package"; then
	undisplace_unlink "$prefix" "$suffix"
    fi
}

check_undisplace_unhide()
{
    file=$1
    hiddenfile=$2
    if LC_ALL=C dpkg-divert --list "$package" | \
	grep -xFq "diversion of $file to $hiddenfile by $package"; then
	undisplace_unhide "$file"
    fi
}

# The following is taken directly from decode() in config-package.pm.
# Dear future maintainers: we have taken pity on you and put the code
# in this block in an effort to make it readable.  "You're welcome."
perl_unparse='
sub unparse {
  $_ = $_[0];
  return "/" unless $_;
  return "_" if $_ eq "-";
  return uc($_) if /^[a-z]$/;
  s/^x//;
  return chr hex $_;
}
'

save_diverted_list()
{
    # "You're welcome, again."
    perl_code='
s/\s+//g;
print join(" ",
           map {
             if (/^diverts/) {
               s|^diverts-|/|;
               s/\+([^+]*)\+/unparse($1)/eg;
               $_
              }
           } split(",", $_)
          );
'
    filename="$1"
    mkdir -p "$cachedir"
    rm -f "$cachedir/$filename" && touch "$cachedir/$filename"
    # Get the list of what the currently installed version of the
    # package diverts, from its Conflicts.  We can't simply use
    # dpkg-divert --list, because we can't guarantee that all
    # diversions by our package were created by c-p-d
    diverted_files=$(dpkg-query -W -f '${Conflicts}' "$package" | perl -ne "$perl_unparse $perl_code")
    for f in $diverted_files; do
        cpd_debug "save_diverted_list: Decoded file path $f"
        if LC_ALL=C dpkg-divert --list "$package" | \
            grep -qx "diversion of $f to .* by $package"; then
            cpd_debug "save_diverted_list: Saving $f -> $cachedir/$filename"
            echo $f >> "$cachedir/$filename"
        else
	    echo "*** OMINOUS WARNING ***: $f was listed as diverted in Conflicts, but does not appear in dpkg-divert output!" >&2
        fi
    done
}

cleanup_diversion() {
    filename="$1"
    # The filename, obtained from diverted-files, tells us what was
    # diverted, but not what it was diverted _to_, so we have no idea
    # if it has a suffix (e.g. .1.gz) or not.  Go go gadget awk.
    diversion=$(LC_ALL=C dpkg-divert --list "$package" | awk -v file="$filename" -v pkg="$package" '(NF == 7) && ($1$2$3$4$6$7 == "diversionof"file"toby"pkg) { print $5 }')
    cpd_debug "cleanup_diversion: $filename was diverted to $diversion"
    if [ -z "$diversion" ]; then
	echo "*** OMINOUS WARNING ***: Was asked to cleanup a diversion which appears to have vanished!" >&2
    elif ! echo "$diversion" | grep -Fq "$theirs"; then
        # Maybe this was a hide(), let's see...
        perl_decode='s/\+([^+]*)\+/unparse($1)/eg;'
        if [ "$(echo "$diversion" | perl -pe "$perl_unparse $perl_decode")" = "/usr/share/${package}${filename}" ]; then
            cpd_debug "cleanup_diversion: will un-hide $filename"
            echo "Cleaning up old diversion of $filename" >&2
            undisplace_unhide $filename
        else
	    echo "*** OMINOUS WARNING ***: Was asked to cleanup a diversion that doesn't include '$theirs' suffix!" >&2
        fi
    else
        # OK, now we calculate the suffix
        prefix_suffix="$(echo "$diversion" | sed -e "s/\(.*\)$theirs/\1 /g")"
        cpd_debug "cleanup_diversion: '$diversion' becomes '$prefix_suffix'"
        echo "Cleaning up old diversion of $filename" >&2
        undisplace_unlink $prefix_suffix
    fi
}

cleanup_old_diversions() {
    # No point running this if this is the first install
    if [ "$1" != "configure" ] || [ -z "$2" ]; then
        return 0
    fi
    # Save the list of what we're diverting now
    save_diverted_list "${package}.diversions-new"
    if [ -f "$cachedir/${package}.diversions-old" ]; then
        cpd_debug "cleanup_old_diversions: List of old diversions exists"
        for f in $(cat "$cachedir/${package}.diversions-old"); do
            cpd_debug "cleanup_old_diversions: Considering $f"
            # If we used to divert something and we now don't, punt it
            if ! grep -xFq "$f" "$cachedir/${package}.diversions-new"; then
                cleanup_diversion "$f"
            fi
        done
    fi
    rm -f "$cachedir/${package}.diversions-new"
    rm -f "$cachedir/${package}.diversions-old"
}

save_old_diversions() {
    if [ "$1" = "install" ] || [ "$1" = "upgrade" ]; then
        if [ -n "$2" ]; then
            save_diverted_list "${package}.diversions-old"
        fi
    fi
}
# End of divert.sh.in
